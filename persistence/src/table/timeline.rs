//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "match_v5", table_name = "timeline")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub match_id: String,
    #[sea_orm(column_type = "Text")]
    pub data_version: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub end_of_game_result: Option<String>,
    pub frame_interval: i64,
    pub game_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::events_timeline::Entity")]
    EventsTimeline,
    #[sea_orm(has_many = "super::frames::Entity")]
    Frames,
    #[sea_orm(has_many = "super::timeline_participants::Entity")]
    TimelineParticipants,
}

impl Related<super::events_timeline::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventsTimeline.def()
    }
}

impl Related<super::frames::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Frames.def()
    }
}

impl Related<super::timeline_participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TimelineParticipants.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
