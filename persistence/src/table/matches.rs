//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "match_v5", table_name = "matches")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub match_id: String,
    #[sea_orm(column_type = "Text")]
    pub data_version: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub end_of_game_result: Option<String>,
    pub game_creation: i64,
    pub game_duration: i64,
    pub game_end_timestamp: Option<i64>,
    pub game_id: i64,
    #[sea_orm(column_type = "Text")]
    pub game_mode: String,
    #[sea_orm(column_type = "Text")]
    pub game_name: String,
    pub game_start_timestamp: i64,
    #[sea_orm(column_type = "Text")]
    pub game_type: String,
    #[sea_orm(column_type = "Text")]
    pub game_version: String,
    pub map_id: i32,
    #[sea_orm(column_type = "Text")]
    pub platform_id: String,
    pub queue_id: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub tournament_code: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::participants::Entity")]
    Participants,
    #[sea_orm(has_many = "super::teams::Entity")]
    Teams,
}

impl Related<super::participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Participants.def()
    }
}

impl Related<super::teams::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Teams.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
