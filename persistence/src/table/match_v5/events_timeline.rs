//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "match_v5", table_name = "events_timeline")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub event_timeline_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub match_id: String,
    pub timestamp: i64,
    pub real_timestamp: Option<i64>,
    #[sea_orm(column_type = "Text")]
    pub r#type: String,
    pub item_id: Option<i32>,
    pub participant_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub level_up_type: Option<String>,
    pub skill_slot: Option<i32>,
    pub creator_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub ward_type: Option<String>,
    pub level: Option<i32>,
    pub assisting_participant_ids: Option<Vec<i32>>,
    pub bounty: Option<i32>,
    pub kill_streak_length: Option<i32>,
    pub killer_id: Option<i32>,
    pub position_x: Option<i32>,
    pub position_y: Option<i32>,
    pub victim_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub kill_type: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub lane_type: Option<String>,
    pub team_id: Option<i32>,
    pub multi_kill_length: Option<i32>,
    pub killer_team_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub monster_type: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub monster_sub_type: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub building_type: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub tower_type: Option<String>,
    pub after_id: Option<i32>,
    pub before_id: Option<i32>,
    pub gold_gain: Option<i32>,
    pub game_id: Option<i64>,
    pub winning_team: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub transform_type: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    pub shutdown_bounty: Option<i32>,
    pub actual_start_time: Option<i64>,
    pub feat_type: Option<i32>,
    pub feat_value: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::match_timeline_victim_damage::Entity")]
    MatchTimelineVictimDamage,
    #[sea_orm(
        belongs_to = "super::timelines::Entity",
        from = "Column::MatchId",
        to = "super::timelines::Column::MatchId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Timelines,
}

impl Related<super::match_timeline_victim_damage::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MatchTimelineVictimDamage.def()
    }
}

impl Related<super::timelines::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Timelines.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
