//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "match_v5", table_name = "timeline_participant_frames")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub frame_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub participant_id: i32,
    pub current_gold: i32,
    pub gold_per_second: i32,
    pub jungle_minions_killed: i32,
    pub level: i32,
    pub minions_killed: i32,
    pub position_x: i32,
    pub position_y: i32,
    pub time_enemy_spent_controlled: i32,
    pub total_gold: i32,
    pub xp: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::champion_stats::Entity")]
    ChampionStats,
    #[sea_orm(has_one = "super::damage_stats::Entity")]
    DamageStats,
    #[sea_orm(
        belongs_to = "super::frames::Entity",
        from = "Column::FrameId",
        to = "super::frames::Column::FrameId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Frames,
}

impl Related<super::champion_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChampionStats.def()
    }
}

impl Related<super::damage_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DamageStats.def()
    }
}

impl Related<super::frames::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Frames.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
