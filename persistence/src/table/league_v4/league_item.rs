//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

use crate::table;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "league_v4", table_name = "league_item")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub puuid: String,
    pub fresh_blood: bool,
    pub wins: i32,
    pub inactive: bool,
    pub veteran: bool,
    pub hot_streak: bool,
    #[sea_orm(column_type = "Text")]
    pub rank: String,
    pub league_points: i32,
    pub losses: i32,
    #[sea_orm(column_type = "Text")]
    pub summoner_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "table::account_v1::accounts::Entity",
        from = "Column::Puuid",
        to = "table::account_v1::accounts::Column::Puuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Accounts,
    #[sea_orm(has_one = "super::mini_series::Entity")]
    MiniSeries,
}

impl Related<table::account_v1::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::mini_series::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MiniSeries.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
