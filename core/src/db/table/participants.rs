//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "match_v5", table_name = "participants")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub match_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub participant_id: i32,
    pub all_in_pings: Option<i32>,
    pub assist_me_pings: Option<i32>,
    pub assists: i32,
    pub baron_kills: i32,
    pub bounty_level: i32,
    pub champ_experience: i32,
    pub champ_level: i32,
    pub champion_id: i32,
    #[sea_orm(column_type = "Text")]
    pub champion_name: String,
    pub command_pings: Option<i32>,
    pub champion_transform: i32,
    pub consumables_purchased: i32,
    pub damage_dealt_to_buildings: Option<i32>,
    pub damage_dealt_to_objectives: i32,
    pub damage_dealt_to_turrets: i32,
    pub damage_self_mitigated: i32,
    pub deaths: i32,
    pub detector_wards_placed: i32,
    pub double_kills: i32,
    pub dragon_kills: i32,
    pub eligible_for_progression: Option<bool>,
    pub enemy_missing_pings: Option<i32>,
    pub enemy_vision_pings: Option<i32>,
    pub first_blood_assist: bool,
    pub first_blood_kill: bool,
    pub first_tower_assist: bool,
    pub first_tower_kill: bool,
    pub game_ended_in_early_surrender: bool,
    pub game_ended_in_surrender: bool,
    pub hold_pings: Option<i32>,
    pub get_back_pings: Option<i32>,
    pub gold_earned: i32,
    pub gold_spent: i32,
    #[sea_orm(column_type = "Text")]
    pub individual_position: String,
    pub inhibitor_kills: i32,
    pub inhibitor_takedowns: Option<i32>,
    pub inhibitors_lost: Option<i32>,
    pub item0: i32,
    pub item1: i32,
    pub item2: i32,
    pub item3: i32,
    pub item4: i32,
    pub item5: i32,
    pub item6: i32,
    pub items_purchased: i32,
    pub killing_sprees: i32,
    pub kills: i32,
    #[sea_orm(column_type = "Text")]
    pub lane: String,
    pub largest_critical_strike: i32,
    pub largest_killing_spree: i32,
    pub largest_multi_kill: i32,
    pub longest_time_spent_living: i32,
    pub magic_damage_dealt: i32,
    pub magic_damage_dealt_to_champions: i32,
    pub magic_damage_taken: i32,
    pub neutral_minions_killed: i32,
    pub need_vision_pings: Option<i32>,
    pub nexus_kills: i32,
    pub nexus_takedowns: Option<i32>,
    pub nexus_lost: Option<i32>,
    pub objectives_stolen: i32,
    pub objectives_stolen_assists: i32,
    pub on_my_way_pings: Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score0: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score1: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score2: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score3: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score4: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score5: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score6: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score7: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score8: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score9: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score10: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score11: Option<Decimal>,
    pub penta_kills: i32,
    pub physical_damage_dealt: i32,
    pub physical_damage_dealt_to_champions: i32,
    pub physical_damage_taken: i32,
    pub placement: Option<i32>,
    pub player_augment1: Option<i32>,
    pub player_augment2: Option<i32>,
    pub player_augment3: Option<i32>,
    pub player_augment4: Option<i32>,
    pub player_subteam_id: Option<i32>,
    pub push_pings: Option<i32>,
    pub profile_icon: i32,
    #[sea_orm(column_type = "Text")]
    pub puuid: String,
    pub quadra_kills: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub riot_id_game_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub riot_id_tagline: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub role: String,
    pub sight_wards_bought_in_game: i32,
    pub spell1_casts: i32,
    pub spell2_casts: i32,
    pub spell3_casts: i32,
    pub spell4_casts: i32,
    pub subteam_placement: Option<i32>,
    pub summoner1_casts: i32,
    pub summoner1_id: i32,
    pub summoner2_casts: i32,
    pub summoner2_id: i32,
    #[sea_orm(column_type = "Text")]
    pub summoner_id: String,
    pub summoner_level: i32,
    #[sea_orm(column_type = "Text")]
    pub summoner_name: String,
    pub team_early_surrendered: bool,
    pub team_id: i32,
    #[sea_orm(column_type = "Text")]
    pub team_position: String,
    pub time_c_cing_others: i32,
    pub time_played: i32,
    pub total_ally_jungle_minions_killed: Option<i32>,
    pub total_damage_dealt: i32,
    pub total_damage_dealt_to_champions: i32,
    pub total_damage_shielded_on_teammates: i32,
    pub total_damage_taken: i32,
    pub total_enemy_jungle_minions_killed: Option<i32>,
    pub total_heal: i32,
    pub total_heals_on_teammates: i32,
    pub total_minions_killed: i32,
    pub total_time_cc_dealt: i32,
    pub total_time_spent_dead: i32,
    pub total_units_healed: i32,
    pub triple_kills: i32,
    pub true_damage_dealt: i32,
    pub true_damage_dealt_to_champions: i32,
    pub true_damage_taken: i32,
    pub turret_kills: i32,
    pub turret_takedowns: Option<i32>,
    pub turrets_lost: Option<i32>,
    pub unreal_kills: i32,
    pub vision_score: i32,
    pub vision_cleared_pings: Option<i32>,
    pub vision_wards_bought_in_game: i32,
    pub wards_killed: i32,
    pub wards_placed: i32,
    pub win: bool,
    pub bait_pings: Option<i32>,
    pub danger_pings: Option<i32>,
    pub basic_pings: Option<i32>,
    pub player_augment5: Option<i32>,
    pub player_augment6: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub riot_id_name: Option<String>,
    pub retreat_pings: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::challenges::Entity")]
    Challenges,
    #[sea_orm(
        belongs_to = "super::matches::Entity",
        from = "Column::MatchId",
        to = "super::matches::Column::MatchId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Matches,
    #[sea_orm(has_one = "super::missions::Entity")]
    Missions,
    #[sea_orm(has_one = "super::participant_perks::Entity")]
    ParticipantPerks,
}

impl Related<super::challenges::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Challenges.def()
    }
}

impl Related<super::matches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Matches.def()
    }
}

impl Related<super::missions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Missions.def()
    }
}

impl Related<super::participant_perks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ParticipantPerks.def()
    }
}

impl Related<super::perk_styles::Entity> for Entity {
    fn to() -> RelationDef {
        super::participant_perks::Relation::PerkStyles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::participant_perks::Relation::Participants.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
