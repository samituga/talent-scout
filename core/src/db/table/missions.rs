//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "match_v5", table_name = "missions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub match_id: String,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub puuid: String,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score0: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score1: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score2: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score3: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score4: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score5: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score6: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score7: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score8: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score9: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score10: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 9)))", nullable)]
    pub player_score11: Option<Decimal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::participants::Entity",
        from = "(Column::MatchId, Column::Puuid)",
        to = "(super::participants::Column::MatchId, super::participants::Column::Puuid)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Participants,
}

impl Related<super::participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Participants.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
