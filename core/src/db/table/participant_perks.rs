//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "match_v5", table_name = "participant_perks")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub match_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub participant_id: i32,
    pub defense: i32,
    pub flex: i32,
    pub offense: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::participants::Entity",
        from = "(Column::MatchId, Column::ParticipantId)",
        to = "(super::participants::Column::MatchId, super::participants::Column::ParticipantId)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Participants,
    #[sea_orm(has_many = "super::perk_styles::Entity")]
    PerkStyles,
}

impl Related<super::participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Participants.def()
    }
}

impl Related<super::perk_styles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PerkStyles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
